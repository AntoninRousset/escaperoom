// Generated by CoffeeScript 2.3.2
var GameBox, GameIssues, GameMenu,
  boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

import {
  Subscriber,
  Container
} from './monitor.js';

import {
  is_empty,
  post_control
} from './monitor.js';

GameBox = class GameBox extends Subscriber {
  constructor() {
    super();
    this.apply_template();
    this.set_screen('game');
    this.subscribe();
  }

  update(datas) {
    this.update_plugs(datas);
    this.shadowRoot.querySelector('game-menu').update(datas);
    if (!datas.running) {
      this.current_screen = 'game';
    } else if (this.current_screen == null) {
      this.current_screen = 'puzzles';
    }
    return this.set_screen(this.current_screen);
  }

};

customElements.define('game-box', GameBox);

GameIssues = class GameIssues extends Container {
  constructor() {
    super();
  }

};

customElements.define('game-issues', GameIssues);

GameMenu = class GameMenu extends HTMLElement {
  constructor() {
    var e, i, len, ref;
    super();
    this.new_game = this.new_game.bind(this);
    this.back_to_game = this.back_to_game.bind(this);
    this.stop_game = this.stop_game.bind(this);
    ref = this.query_all_options_elements();
    // listen to all changes on game options
    for (i = 0, len = ref.length; i < len; i++) {
      e = ref[i];
      e.onchange = (event) => {
        return this.post_input_element(event.target);
      };
      e.onkeyup = (event) => {
        if (event.key === "Escape") {
          this.sync();
          return event.target.blur();
        }
      };
    }
  }

  
  //@querySelector('#game-option-reset').onclick = (event) =>
  //  @read_options(@options)
  //@querySelector('#new-game').onclick = @new_game
  //@querySelector('#back-to-game').onclick = @back_to_game
  //@querySelector('#stop-game').onclick = @stop_game
  query_all_options_elements() {
    var all, selector;
    selector = '.game-option > input:not([type=button]), .game-option > select';
    all = this.querySelectorAll(selector);
    console.log(selector);
    console.log(all);
    return all;
  }

  async post_input_element(e) {
    e.setCustomValidity('Invalid');
    return (await post_control(this.getAttribute('src'), {
      action: 'update_options',
      options: {
        [e.name]: e.value
      }
    }));
  }

  sync() {
    return document.querySelector('game-box').sync();
  }

  update(data) {
    this.update_options(data.game.options, data.gamemasters);
    if (data.game.running) {
      this.querySelector('#new-game').setAttribute('hidden', '');
      this.querySelector('#back-to-game').removeAttribute('hidden');
      this.querySelector('#stop-game').disabled = false;
      return this.querySelector('#game-creation').disabled = true;
    } else {
      this.querySelector('#new-game').removeAttribute('hidden');
      this.querySelector('#back-to-game').setAttribute('hidden', '');
      this.querySelector('#stop-game').disabled = true;
      return this.querySelector('#game-creation').disabled = false;
    }
  }

  update_options(options, gamemasters) {
    var e, email, gm, gmselect, k, opt, results, v;
    // set gamemasters list
    gmselect = this.querySelector('#game-option-gamemaster');
    gmselect.innerHTML = '';
    for (email in gamemasters) {
      gm = gamemasters[email];
      opt = document.createElement('option');
      opt.value = email;
      opt.innerHTML = gm.firstname + ' ' + gm.lastname;
      gmselect.appendChild(opt);
    }
// set fields values
    results = [];
    for (k in options) {
      v = options[k];
      e = this.querySelector('#game-option-' + k);
      e.value = v;
      results.push(e.setCustomValidity(''));
    }
    return results;
  }

  async new_game() {
    boundMethodCheck(this, GameMenu);
    this.querySelector('#game-creation').disabled = true;
    await post_control(this.getAttribute('src'), {
      action: 'new_game',
      options: {
        n_player: this.querySelector('#game-option-number-player').value,
        children_mode: this.querySelector('#game-option-children').checked,
        timeout_enabled: this.querySelector('#game-option-timeout-enabled').value,
        timeout: '00:' + this.querySelector('#game-option-timeout-h').value.padStart(2, '0') + ':' + this.querySelector('#game-option-timeout-m').value.padStart(2, '0')
      }
    });
    return document.querySelector('game-box').current_screen = 'puzzles';
  }

  back_to_game() {
    var game_box;
    boundMethodCheck(this, GameMenu);
    game_box = document.querySelector('game-box');
    game_box.current_screen = 'puzzles';
    return game_box.set_screen(game_box.current_screen);
  }

  stop_game() {
    boundMethodCheck(this, GameMenu);
    return post_control(this.getAttribute('src'), {
      action: 'stop_game'
    });
  }

};

customElements.define('game-menu', GameMenu);
