// Generated by CoffeeScript 2.3.2
var GameBox, GameIssues, GameMenu,
  boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

import {
  Subscriber,
  Container
} from './monitor.js';

import {
  is_empty,
  post_control
} from './monitor.js';

GameBox = class GameBox extends Subscriber {
  constructor() {
    super();
    this.end_game = this.end_game.bind(this);
    this.apply_template();
    this.set_screen('game');
    this.shadowRoot.querySelector('#restart-button').onclick = this.end_game;
    this.subscribe();
  }

  update(datas) {
    this.update_plugs(datas);
    this.shadowRoot.querySelector('game-menu').update(datas);
    if (!datas.running) {
      this.current_screen = 'game';
    } else if (this.current_screen == null) {
      this.current_screen = 'puzzles';
    }
    return this.set_screen(this.current_screen);
  }

  end_game() {
    boundMethodCheck(this, GameBox);
    return post_control(this.getAttribute('src'), {
      action: 'end_game'
    });
  }

};

customElements.define('game-box', GameBox);

GameIssues = class GameIssues extends Container {
  constructor() {
    super();
  }

};

customElements.define('game-issues', GameIssues);

GameMenu = class GameMenu extends HTMLElement {
  constructor() {
    var e, h, hh, i, j, l, len, len1, m, mm, opt, ref, ref1, time;
    super();
    this.new_game = this.new_game.bind(this);
    this.back_to_game = this.back_to_game.bind(this);
    this.stop_game = this.stop_game.bind(this);
    ref = this.query_all_options_elements();
    // listen to all changes on game options
    for (i = 0, len = ref.length; i < len; i++) {
      e = ref[i];
      e.onchange = (event) => {
        return this.post_input_element(event.target);
      };
      e.onkeyup = (event) => {
        if (event.key === "Escape") {
          this.sync();
          return event.target.blur();
        }
      };
    }
    this.querySelector('#new-game').onclick = this.new_game;
    this.querySelector('#back-to-game').onclick = this.back_to_game;
    this.querySelector('#stop-game').onclick = this.stop_game;
    // fill planned_date-time
    time = this.querySelector('#game-option-planned_date-time');
    time.innerHTML = '';
    for (h = j = 0; j <= 23; h = ++j) {
      hh = h.toString().padStart(2, "0");
      ref1 = [0, 15, 30, 45];
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        m = ref1[l];
        mm = m.toString().padStart(2, "0");
        opt = document.createElement('option');
        opt.value = hh + ':' + mm;
        opt.innerHTML = opt.value;
        time.appendChild(opt);
      }
    }
  }

  query_all_options_elements() {
    var all, selector;
    selector = '.game-option > input:not([type=button]),';
    selector += ' .game-option > select, ';
    selector += ' .game-option > textarea';
    all = this.querySelectorAll(selector);
    return all;
  }

  async post_input_element(e) {
    var date, time, value;
    value = e.value;
    if (e.name === "planned_date") {
      date = this.querySelector('#game-option-planned_date-date').value;
      time = this.querySelector('#game-option-planned_date-time').value;
      value = date + 'T' + time;
    }
    e.setCustomValidity('Invalid');
    return (await post_control(this.getAttribute('src'), {
      action: 'update_options',
      options: {
        [e.name]: value
      }
    }));
  }

  sync() {
    return document.querySelector('game-box').sync();
  }

  update(data) {
    this.update_options(data.game.options, data.gamemasters);
    if (data.game.running) {
      this.querySelector('#new-game').setAttribute('hidden', '');
      this.querySelector('#back-to-game').removeAttribute('hidden');
      this.querySelector('#stop-game').disabled = false;
      this.querySelector('#game-option-gamemaster').disabled = true;
      return this.querySelector('#game-option-test').disabled = true;
    } else {
      this.querySelector('#new-game').removeAttribute('hidden');
      this.querySelector('#back-to-game').setAttribute('hidden', '');
      this.querySelector('#stop-game').disabled = true;
      this.querySelector('#game-option-gamemaster').disabled = false;
      return this.querySelector('#game-option-test').disabled = false;
    }
  }

  update_options(options, gamemasters) {
    var e, e_date, e_time, email, gm, gmselect, k, opt, results, today, v;
    // set gamemasters list
    gmselect = this.querySelector('#game-option-gamemaster');
    gmselect.innerHTML = '';
    for (email in gamemasters) {
      gm = gamemasters[email];
      opt = document.createElement('option');
      opt.value = email;
      opt.innerHTML = gm.firstname + ' ' + gm.lastname;
      gmselect.appendChild(opt);
    }
// set fields values
    results = [];
    for (k in options) {
      v = options[k];
      // set planned_datetime option
      if (k === 'planned_date') {
        e_date = this.querySelector('#game-option-planned_date-date');
        e_time = this.querySelector('#game-option-planned_date-time');
        if (v == null) {
          // set planned_datetime-date to today
          today = new Date().toISOString().substr(0, 10);
          e_date.value = today;
          results.push(e_time.value = null);
        } else {
          e_date.value = v.substr(0, 10);
          e_time.value = v.substr(11, 5);
          e_date.setCustomValidity('');
          results.push(e_time.setCustomValidity(''));
        }
      } else {
        // set any other options
        e = this.querySelector('#game-option-' + k);
        e.value = v;
        results.push(e.setCustomValidity(''));
      }
    }
    return results;
  }

  async new_game() {
    boundMethodCheck(this, GameMenu);
    await post_control(this.getAttribute('src'), {
      action: 'new_game'
    });
    return document.querySelector('game-box').current_screen = 'puzzles';
  }

  back_to_game() {
    var game_box;
    boundMethodCheck(this, GameMenu);
    game_box = document.querySelector('game-box');
    game_box.current_screen = 'puzzles';
    return game_box.set_screen(game_box.current_screen);
  }

  stop_game() {
    boundMethodCheck(this, GameMenu);
    return post_control(this.getAttribute('src'), {
      action: 'stop_game'
    });
  }

};

customElements.define('game-menu', GameMenu);
