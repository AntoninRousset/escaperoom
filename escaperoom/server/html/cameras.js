// Generated by CoffeeScript 2.3.2
var CameraVideo, CamerasBox, CamerasList,
  boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

import {
  Subscriber,
  Container
} from './monitor.js';

import {
  is_empty
} from './monitor.js';

CamerasBox = class CamerasBox extends Subscriber {
  constructor() {
    super();
    this.apply_template();
    this.cameras_list = this.shadowRoot.querySelector('cameras-list');
    this.subscribe();
    this.onmouseover = function(event) {
      return this.cameras_list.setAttribute('visible', 'true');
    };
    this.onmouseout = function(event) {
      return this.cameras_list.setAttribute('visible', 'false');
    };
  }

  update(datas) {
    this.update_plugs(datas);
    this.cameras_list.read_items(datas.cameras);
    if (is_empty(datas.cameras)) {
      return this.set_screen('empty');
    } else {
      return this.set_screen('main');
    }
  }

};

customElements.define('cameras-box', CamerasBox);

CamerasList = class CamerasList extends Container {
  constructor() {
    super();
  }

  add_item(id, data) {
    var item;
    item = this.create_item(id);
    item.onclick = async(event) => {
      var bigscreen, camera;
      camera = item.shadowRoot.querySelector('camera-video');
      bigscreen = document.querySelector('cameras-box').shadowRoot.getElementById('bigscreen');
      bigscreen.srcObject = camera.video.srcObject;
      return (await bigscreen.play());
    };
    this.appendChild(item);
    return item.shadowRoot.querySelector('camera-video').start(null, '?id=' + id);
  }

};

customElements.define('cameras-list', CamerasList);

CameraVideo = class CameraVideo extends HTMLElement {
  constructor() {
    var error;
    super();
    this.got_tracks = this.got_tracks.bind(this);
    try {
      this.pc = new RTCPeerConnection();
      this.pc.onnegotiationneeded = (event) => {
        return this.negotiate();
      };
      this.pc.onicegatheringstatechange = (event) => {
        if (this.pc.iceGatheringState === 'complete') {
          return this.send_offer();
        }
      };
      this.pc.ontrack = this.got_tracks;
    } catch (error1) {
      error = error1;
      this.set_screen(error);
    }
    this.video = this.create_video();
  }

  create_video() {
    var video;
    video = document.createElement('video');
    video.muted = true;
    video.autoplay = true;
    video.textContent = this.textContent;
    this.textContent = null;
    this.appendChild(video);
    return video;
  }

  start(path = null, query_str = null) {
    if (path != null) {
      path = this.setAttribute('src', path);
    } else {
      path = this.getAttribute('src');
    }
    if (query_str != null) {
      this.query_str = query_str;
    } else {
      query_str = this.query_str;
    }
    this.loc = this.getAttribute('src') + query_str;
    this.pc.addTransceiver('video', {
      direction: 'recvonly'
    });
    return this.pc.addTransceiver('audio', {
      direction: 'recvonly'
    });
  }

  async negotiate() {
    var offer;
    offer = (await this.pc.createOffer());
    return (await this.pc.setLocalDescription(offer));
  }

  async send_offer() {
    var offer, response;
    offer = this.pc.localDescription;
    response = (await fetch(this.loc, {
      body: JSON.stringify({
        sdp: offer.sdp,
        type: offer.type
      }),
      headers: {
        'Content-Type': 'application/json'
      },
      method: 'POST'
    }));
    return this.pc.setRemoteDescription((await response.json()));
  }

  got_tracks(event) {
    boundMethodCheck(this, CameraVideo);
    if (event.track.kind === 'audio') {
      console.log('audio', event.track);
      this.video.srcObject = event.streams[0];
    } else if (event.track.kind === 'video') {
      console.log('video', event.track);
      this.video.srcObject = event.streams[0];
    }
    return console.log(event.streams[0].getTracks());
  }

};

customElements.define('camera-video', CameraVideo);
