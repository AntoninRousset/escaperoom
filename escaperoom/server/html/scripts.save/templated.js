// Generated by CoffeeScript 2.3.2
(function() {
  var Templated;

  Templated = class Templated extends HTMLElement {
    constructor(template = null) {
      var read_slot, ref, slot, slots;
      super();
      this.template = template;
      // query template 
      this.template = (ref = this.template) != null ? ref : this.querySelector('template');
      if (this.template == null) {
        console.warn('No template given');
        return;
      }
      // query slots
      read_slot = function(slot) {
        return {
          name: slot.getAttribute('name'),
          type: slot.getAttribute('type') || 'span'
        };
      };
      slots = this.template.content.querySelectorAll('slot');
      this.slots = (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = slots.length; i < len; i++) {
          slot = slots[i];
          results.push(read_slot(slot));
        }
        return results;
      })();
    }

    // copy template class and create plugs
    apply_template(node = this) {
      var i, len, ref, slot;
      // copy template class
      if (this.template.hasAttribute('class')) {
        node.setAttribute('class', this.template.getAttribute('class'));
      }
      ref = this.slots;
      // create plugs
      for (i = 0, len = ref.length; i < len; i++) {
        slot = ref[i];
        node.appendChild(this.create_plug(slot));
      }
      node.attachShadow({
        mode: 'open'
      });
      node.shadowRoot.appendChild(this.template.content.cloneNode(true));
      return node;
    }

    // return an element base on the slot type and name
    create_plug(slot) {
      var plug;
      plug = document.createElement(slot.type);
      plug.setAttribute('slot', slot.name);
      return plug;
    }

    // update all plugs
    update_plugs(data, node = this) {
      var i, len, ref, results, slot;
      ref = this.slots;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        slot = ref[i];
        results.push(this.update_plug(slot.name, data, node));
      }
      return results;
    }

    // update plug content
    update_plug(slot_name, data, node) {
      var plug;
      plug = node.querySelector('[slot=' + slot_name + ']');
      return plug.textContent = data[slot];
    }

    set_screen(name, node = this) {
      var i, len, ref, results, screen;
      ref = node.shadowRoot.querySelectorAll('.screen');
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        screen = ref[i];
        if (screen.getAttribute('name') === name) {
          results.push(screen.removeAttribute('hidden'));
        } else {
          results.push(screen.setAttribute('hidden', ''));
        }
      }
      return results;
    }

    has_screen(name, node = this) {
      if (node.shadowRoot == null) {
        return false;
      }
      return node.shadowRoot.querySelector('.screen[name="' + name + '"]') != null;
    }

    get_screen(node = this) {
      return this.shadowRoot.querySelector('.screen:not([hidden])');
    }

  };

}).call(this);
