{
  "version": 3,
  "file": "templated.js",
  "sourceRoot": "",
  "sources": [
    "templated.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "class Templated extends HTMLElement\n\n  constructor: (@template=null) ->\n    super()\n\n    # query template \n    @template = @template ? @querySelector('template')\n    if not @template?\n      console.warn('No template given')\n      return\n\n    # query slots\n    read_slot = (slot) ->\n      return {\n        name: slot.getAttribute('name'),\n        type: slot.getAttribute('type') || 'span'\n      }\n    slots = @template.content.querySelectorAll('slot')\n    @slots = (read_slot(slot) for slot in slots)\n\n  # copy template class and create plugs\n  apply_template: (node=this) ->\n\n    # copy template class\n    if @template.hasAttribute('class')\n      node.setAttribute('class', @template.getAttribute('class'))\n\n    # create plugs\n    for slot in @slots\n      node.appendChild(@create_plug(slot))\n    node.attachShadow({mode: 'open'})\n    node.shadowRoot.appendChild(@template.content.cloneNode(true))\n    node\n\n  # return an element base on the slot type and name\n  create_plug: (slot) ->\n    plug = document.createElement(slot.type)\n    plug.setAttribute('slot', slot.name)\n    plug\n\n  # update all plugs\n  update_plugs: (data, node=this) ->\n    for slot in @slots\n      @update_plug(slot.name, data, node)\n\n  # update plug content\n  update_plug: (slot_name, data, node) ->\n    plug = node.querySelector('[slot=' + slot_name + ']')\n    plug.textContent = data[slot]\n\n  set_screen: (name, node=this) ->\n    for screen in node.shadowRoot.querySelectorAll('.screen')\n      if screen.getAttribute('name') is name\n        screen.removeAttribute('hidden')\n      else\n        screen.setAttribute('hidden', '')\n\n  has_screen: (name, node=this) ->\n    if not node.shadowRoot?\n      return false\n    node.shadowRoot.querySelector('.screen[name=\"'+name+'\"]')?\n\n  get_screen: (node=this) ->\n    @shadowRoot.querySelector('.screen:not([hidden])')\n\n\n\n"
  ]
}