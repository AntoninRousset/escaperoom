{
  "version": 3,
  "file": "communication.js",
  "sourceRoot": "",
  "sources": [
    "communication.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "dom_parser = new DOMParser()\n\n\n# TODO to remove, only here to emulate bandwidth limitation\nsleep = (ms) ->\n  new Promise((resolve) -> setTimeout(resolve, ms))\n\n\nexport post_control = (loc, data) ->\n  response = await fetch(loc, {\n    headers: {'Content-Type': 'application/json'},\n    body: JSON.stringify(data),\n    method: 'POST'\n  })\n  datas = await response.json()\n  if datas.state == 'failed'\n    if datas.reason?\n      throw 'failed to post control: '+datas.reason\n    else\n      throw 'failed to post control'\n  datas.data\n\n\nexport fetch_html = (url, slow=false) ->\n\n  resp = await fetch(url, {mehtod: 'GET'})\n\n  if slow\n    await sleep(Math.floor(Math.random() * 3000))\n\n  if not resp.ok\n    console.warn('Failed to fetch', url)\n    return null\n\n  return dom_parser.parseFromString(await resp.text(), 'text/html')\n\n\nexport class Subscriber extends HTMLElement\n\n  event_source = null\n  subscribers = []\n\n  constructor: () ->\n    super()\n    @loc = ''\n    @classList.add('loadable')\n\n  event_handler = (event) ->\n\n    console.log('-- event -->', event)\n\n    data = JSON.parse(event.data)\n\n    # inform all id corresponding subscribers\n    for subscriber in subscribers\n      if data['type'] == 'update'\n        loc = data['url']\n\n        if 'id' of data\n          loc = loc + '?id=' + data['id']\n\n        if subscriber.loc == loc\n          subscriber.sync()\n\n  subscribe: (@loc) =>\n\n    # be sure to be unsubscribed first\n    @unsubscribe()\n\n    event_path = @loc.substring(0, @loc.lastIndexOf('/')) + '/events'\n    if not event_source?\n      event_source = new EventSource(event_path)\n    subscribers.push(this)\n    event_source.onmessage = event_handler\n    @sync()\n\n  sync: () =>\n    now = new Date()\n    @now = now\n    loading_timeout = setTimeout(@onloading, 1000)\n    response = await fetch(@loc)\n    data = await response.json()\n    clearTimeout(loading_timeout)\n    if now is @now\n      @update(data)\n\n  unsubscribe: () ->\n    for i, subscriber of subscribers\n      if this is subscriber\n        subscribers.splice(i, 1)\n\n  update: (data) ->\n    console.warn('Uncatched update')\n\n  onloading: () =>\n    @setAttribute('loading', '')\n\n  onsuccess: () =>\n    @removeAttribute('loading')\n    @removeAttribute('error')\n\n  onerror: () =>\n    @setAttribute('error', '')\n"
  ]
}