{
  "version": 3,
  "file": "fetch.js",
  "sourceRoot": "",
  "sources": [
    "fetch.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import {MultiScreenElement} from './screen.js'\n\ndom_parser = new DOMParser()\n\n# TODO to remove, only here to emulate bandwidth limitation\nsleep = (ms) ->\n  new Promise((resolve) -> setTimeout(resolve, ms))\n\n\nexport fetch_data = (url, data_type, emul_slow=false) ->\n\n    resp = await fetch(url, {method: 'GET'})\n\n    if emul_slow\n      await sleep(Math.floor(Math.random() * 3000))\n\n    if not resp.ok\n      console.error('Failed to fetch', url)\n      return null\n\n    if data_type == 'json'\n      return JSON.parse(await resp.text())\n\n    else if data_type == 'text'\n      return await resp.text()\n\n    else if data_type == 'html'\n      return resp.text().then(\n        (text) -> dom_parser.parseFromString(text, 'text/html')\n      )\n\n    else\n      console.error(\"Invalid data_type #{data_type} during fetching\")\n\n\nexport class FetchedElement extends MultiScreenElement\n\n  constructor: (@src=null, @data_type='json', @emul_slow=false) ->\n\n    super('loading')\n    @_data = null\n\n    Object.defineProperty(this, \"data\",\n      get: () -> @_data\n      set: (data) ->\n        @onnewdata(data)\n        @_data = data\n    )\n\n  onnewdata: (data) =>\n    console.warn('Unused data', data)\n\n  load_from_src: () =>\n    await @load_from(@src)\n\n  load_from: (url) =>\n\n    now = new Date()\n    @now = now\n\n    loading_timeout = setTimeout(@onloading, 1000)\n    @data = await fetch_data(url, @data_type, @emul_slow)\n    clearTimeout(loading_timeout)\n\n    if now is @now\n      @data = data\n\n\nexport class SubscribedElement extends FetchedElement\n\n  subscribers = []\n  event_source = new EventSource('events')\n  event_source.onmessage = (event) ->\n\n    data = JSON.parse(event.data)\n\n    if data['type'] == 'update'\n\n      loc = data['url']\n\n      if 'id' of data\n        loc = loc + '?id='+data['id']\n\n    for subscriber in subscribers\n      if subscriber.loc == loc\n        subscriber.load_from_src()\n\n  connectCallback: () =>\n    super.connectCallback()\n    @subscribe(@src)\n\n  subscribe: () ->\n\n    # avoid subscribing twice\n    @unsubscribe()\n\n    subscribers.push(this)\n"
  ]
}