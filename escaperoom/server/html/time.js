// Generated by CoffeeScript 2.3.2
var ChronometerDial,
  boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

import {
  Subscriber,
  Container
} from './monitor.js';

import {
  is_empty
} from './monitor.js';

ChronometerDial = (function() {
  var chronometers;

  class ChronometerDial extends HTMLElement {
    constructor() {
      super();
      this.sync_loop = this.sync_loop.bind(this);
      this.time_loop = this.time_loop.bind(this);
      this.period = 250;
      this.sync_loop();
      this.time_loop();
    }

    async sync_loop() {
      var response;
      boundMethodCheck(this, ChronometerDial);
      response = (await fetch(this.getAttribute('src')));
      this.time = Date((await response.json()['microseconds']) * 1000);
      return setTimeout(this.sync_loop, 40 * this.period);
    }

    time_loop() {
      var period;
      boundMethodCheck(this, ChronometerDial);
      if (this.time != null) {
        this.textContent = this.time_to_string(this.time);
        period = this.period;
      } else {
        this.textContent = '';
        period = this.period;
      }
      this.last_tick = new Date();
      return setTimeout(this.time_loop, period);
    }

    time_to_string(time) {
      return time.getUTCHours() + ':' + time.getUTCMinutes + ':' + time.getUTCSeconds;
    }

  };

  chronometers = {};

  return ChronometerDial;

}).call(this);

customElements.define('chronometer-dial', ChronometerDial);
