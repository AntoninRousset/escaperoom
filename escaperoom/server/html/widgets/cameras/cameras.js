// Generated by CoffeeScript 2.3.2
var CameraVideo, CamerasWidget,
  boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

import {
  Widget
} from '/ressources/modules/panel.js';

import {
  post_control
} from '/ressources/modules/communication.js';

CamerasWidget = class CamerasWidget extends Widget {
  constructor() {
    super('cameras', 'Cameras');
    this.connectedCallback = this.connectedCallback.bind(this);
    this.update = this.update.bind(this);
    this.subscribe('/cameras');
  }

  connectedCallback() {
    boundMethodCheck(this, CamerasWidget);
    super.connectedCallback();
    return this.querySelector('.content').classList.add('darkbox');
  }

  update(data) {
    var content, d, id, ref, video;
    boundMethodCheck(this, CamerasWidget);
    content = this.querySelector('.content');
    content.innerHTML = '';
    ref = data.cameras;
    for (id in ref) {
      d = ref[id];
      video = new CameraVideo();
      video.start('/camera', '?id=' + id);
      content.appendChild(video);
    }
    return this.removeAttribute('loading');
  }

};

customElements.define('widget-cameras', CamerasWidget);

CameraVideo = class CameraVideo extends HTMLElement {
  constructor() {
    super();
    this.got_tracks = this.got_tracks.bind(this);
    this.video = this.create_video();
    this.pc = this.create_pc();
  }

  create_pc() {
    var config, pc;
    config = {
      sdpSementics: 'unified-plan'
    };
    pc = new RTCPeerConnection();
    pc.onnegotiationneeded = (event) => {
      return this.negotiate();
    };
    pc.onicegatheringstatechange = (event) => {
      if (pc.iceGatheringState === 'complete') {
        return this.send_offer();
      }
    };
    pc.ontrack = this.got_tracks;
    return pc;
  }

  create_video() {
    var video;
    video = document.createElement('video');
    video.muted = true;
    video.autoplay = true;
    video.textContent = this.textContent;
    this.textContent = null;
    this.appendChild(video);
    return video;
  }

  start(path, query_str = null) {
    if (query_str != null) {
      this.query_str = query_str;
    } else {
      query_str = this.query_str;
    }
    //@loc = @getAttribute('src') + query_str
    this.loc = path + query_str;
    this.pc.addTransceiver('video', {
      direction: 'recvonly'
    });
    return this.pc.addTransceiver('audio', {
      direction: 'recvonly'
    });
  }

  async negotiate() {
    var offer;
    offer = (await this.pc.createOffer());
    return (await this.pc.setLocalDescription(offer));
  }

  async send_offer() {
    var data, offer;
    offer = this.pc.localDescription;
    data = (await post_control(this.loc, {
      sdp: offer.sdp,
      type: offer.type
    }));
    return this.pc.setRemoteDescription(data);
  }

  got_tracks(event) {
    boundMethodCheck(this, CameraVideo);
    if (event.track.kind === 'audio') {
      return this.video.srcObject = event.streams[0];
    } else if (event.track.kind === 'video') {
      return this.video.srcObject = event.streams[0];
    }
  }

};

customElements.define('camera-video', CameraVideo);
