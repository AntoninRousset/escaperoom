// Generated by CoffeeScript 2.3.2
var CamerasTab, CluesTab, DashboardTab, RoomTab, StoryTab, Tab, TabsNav,
  boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

import {
  fetch_html
} from './communication.js';

Function.prototype.property = function(prop, desc) {
  return Object.defineProperty(this.prototype, prop, desc);
};

TabsNav = class TabsNav extends HTMLElement {
  constructor() {
    super();
    this.connectedCallback = this.connectedCallback.bind(this);
    this.update = this.update.bind(this);
    this.select_from_hash = this.select_from_hash.bind(this);
    this.select = this.select.bind(this);
    // set default class
    this.classList.add('loadable');
    // set loading mode by default
    this.setAttribute('loading', '');
    window.addEventListener('hashchange', this.select_from_hash);
    window.addEventListener('load', this.update);
  }

  connectedCallback() {
    var cls, content;
    boundMethodCheck(this, TabsNav);
    // create loading screen
    cls = customElements.get('loading-animation');
    this.appendChild(new cls());
    // create content screen
    content = document.createElement('div');
    content.classList.add('content');
    return this.appendChild(content);
  }

  async update(data) {
    var a, content, i, len, p, svg, tab, tabs;
    boundMethodCheck(this, TabsNav);
    tabs = [
      {
        name: 'dashboard',
        title: 'Dashboard'
      },
      {
        name: 'story',
        title: 'Story'
      },
      {
        name: 'cameras',
        title: 'Cameras'
      },
      {
        name: 'room',
        title: 'Room'
      }
    ];
    content = this.querySelector('.content');
    for (i = 0, len = tabs.length; i < len; i++) {
      tab = tabs[i];
      a = document.createElement('a');
      a.href = '#' + tab.name;
      // add svg icon
      svg = (await fetch_html('/ressources/tabs/' + tab.name + '/tab.svg'));
      svg = svg.querySelector('svg');
      a.appendChild(svg);
      // add title
      p = document.createElement('p');
      p.textContent = tab.title;
      a.appendChild(p);
      content.appendChild(a);
    }
    this.select_from_hash();
    return this.removeAttribute('loading');
  }

  select_from_hash() {
    boundMethodCheck(this, TabsNav);
    return this.select(location.hash.substr(1));
  }

  select(tab) {
    var a, cls, container, e, i, len, name, ref, target;
    boundMethodCheck(this, TabsNav);
    ref = this.querySelectorAll('a');
    // remove all selected
    for (i = 0, len = ref.length; i < len; i++) {
      a = ref[i];
      a.removeAttribute('selected');
    }
    a = this.querySelector('a[href="#' + tab + '"]');
    if (!a) {
      a = this.querySelector('a');
      // remove hash
      history.pushState('', document.title, location.pathname + location.search);
    }
    // select
    name = a.getAttribute('href').substr(1);
    a.setAttribute('selected', '');
    target = a.getAttribute('target');
    container = document.getElementById(this.getAttribute('for'));
    container.innerHTML = '';
    cls = customElements.get('tab-' + name);
    e = new cls();
    return container.appendChild(e);
  }

};

Tab = class Tab extends HTMLElement {
  constructor() {
    super();
    // set default class
    this.classList.add('tab');
  }

};

DashboardTab = class DashboardTab extends Tab {
  constructor() {
    super('dashboard', 'Dashboard');
    this.connectedCallback = this.connectedCallback.bind(this);
    this.classList.add('columns');
  }

  connectedCallback() {
    var cls, e, i, len, ref, results, w;
    boundMethodCheck(this, DashboardTab);
    ref = ['timer', 'game', 'story', 'clues', 'cameras'];
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      w = ref[i];
      cls = customElements.get('widget-' + w);
      e = new cls();
      results.push(this.appendChild(e));
    }
    return results;
  }

};

StoryTab = class StoryTab extends Tab {
  constructor() {
    super('story', 'Story');
  }

};

CamerasTab = class CamerasTab extends Tab {
  constructor() {
    super('cameras', 'Cameras');
  }

};

CluesTab = class CluesTab extends Tab {
  constructor() {
    super('clues', 'Clues');
  }

};

RoomTab = class RoomTab extends Tab {
  constructor() {
    super('room', 'Room');
  }

};

customElements.define('tabs-nav', TabsNav);

customElements.define('tab-dashboard', DashboardTab);

customElements.define('tab-story', StoryTab);

customElements.define('tab-cameras', CamerasTab);

customElements.define('tab-clues', CluesTab);

customElements.define('tab-room', RoomTab);
