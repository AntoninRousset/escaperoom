// Generated by CoffeeScript 2.3.2
var toggle_row_expand,
  indexOf = [].indexOf,
  boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

import {
  SyncedContainer
} from './container.mjs';

toggle_row_expand = function() {
  var row;
  row = this.closest('.lrow');
  if (indexOf.call(row.classList, 'opened') >= 0) {
    return row.classList.remove('opened');
  } else {
    return row.classList.add('opened');
  }
};

export var SyncedTree = class SyncedTree extends SyncedContainer {
  constructor() {
    super();
    this.connectedCallback = this.connectedCallback.bind(this);
    this.onadditem = this.onadditem.bind(this);
    this.onupdateitem = this.onupdateitem.bind(this);
    this.onremoveitem = this.onremoveitem.bind(this);
    this.classList.add('list');
    Object.defineProperty(this, 'lbody', {
      get: () => {
        return this.querySelector('*.lbody');
      }
    });
  }

  connectedCallback() {
    boundMethodCheck(this, SyncedTree);
    this.src = this.getAttribute('src');
    return super.connectedCallback();
  }

  onadditem(id, data) {
    var expand, i, item, len, ref, template;
    boundMethodCheck(this, SyncedTree);
    template = this.lbody.querySelector('template');
    item = this.apply_template(template, this.lbody);
    item.setAttribute('item_id', id);
    if (indexOf.call(item.classList, 'expandable') >= 0) {
      ref = item.querySelectorAll('.expand');
      for (i = 0, len = ref.length; i < len; i++) {
        expand = ref[i];
        expand.addEventListener('click', toggle_row_expand);
      }
    }
    return this.update_item(item, data);
  }

  onupdateitem(id, data) {
    var item;
    boundMethodCheck(this, SyncedTree);
    item = this.lbody.querySelector(`*[item_id='${id}']`);
    return this.update_item(item, data);
  }

  onremoveitem(id, data) {
    var item;
    boundMethodCheck(this, SyncedTree);
    item = this.lbody.querySelector(`*[item_id='${id}']`);
    return item.remove();
  }

};

customElements.define('synced-list', SyncedList);
