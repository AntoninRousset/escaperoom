// Generated by CoffeeScript 2.3.2
var boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

import {
  TemplatedElement
} from './template.mjs';

export var MultiScreenElement = (function() {
  class MultiScreenElement extends TemplatedElement {
    constructor(default_screen = '') {
      super();
      this.connectedCallback = this.connectedCallback.bind(this);
      this.attributeChangedCallback = this.attributeChangedCallback.bind(this);
      this.set_screen = this.set_screen.bind(this);
      this.get_screen = this.get_screen.bind(this);
      this.default_screen = default_screen;
    }

    static get_observed_attributes() {
      return ['screen'];
    }

    connectedCallback() {
      boundMethodCheck(this, MultiScreenElement);
      if (!this.hasAttribute('screen')) {
        return this.set_screen(this.default_screen);
      }
    }

    attributeChangedCallback(name, old_value, new_value) {
      var i, len, ref, results, screen;
      boundMethodCheck(this, MultiScreenElement);
      if (name === 'screen') {
        ref = this.querySelectorAll(':scope > .screen');
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          screen = ref[i];
          if (screen.getAttribute('name') === new_value) {
            results.push(screen.removeAttribute('hidden'));
          } else {
            results.push(screen.setAttribute('hidden', ''));
          }
        }
        return results;
      }
    }

    set_screen(name) {
      boundMethodCheck(this, MultiScreenElement);
      if (name != null) {
        return this.setAttribute('screen', name);
      }
      return this.removeAttribute('screen');
    }

    get_screen(name) {
      boundMethodCheck(this, MultiScreenElement);
      return this.querySelector(`.screen[name='${name}']`);
    }

  };

  Object.defineProperty(MultiScreenElement, 'observedAttributes', {
    get: () => {
      return TemplatedElement.observedAttributes.concat(['screen']);
    }
  });

  return MultiScreenElement;

}).call(this);

customElements.define('multi-screen', MultiScreenElement);
