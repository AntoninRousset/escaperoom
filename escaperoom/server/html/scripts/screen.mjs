// Generated by CoffeeScript 2.3.2
var boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

import {
  TemplatedElement
} from './template.mjs';

export var MultiScreenElement = (function() {
  class MultiScreenElement extends TemplatedElement {
    constructor(default_screen) {
      super();
      this.connectedCallback = this.connectedCallback.bind(this);
      this.attributeChangedCallback = this.attributeChangedCallback.bind(this);
      this.set_screen = this.set_screen.bind(this);
      this.get_screen = this.get_screen.bind(this);
      this.default_screen = default_screen;
    }

    connectedCallback() {
      boundMethodCheck(this, MultiScreenElement);
      if (!this.hasAttribute('screen')) {
        return this.set_screen(this.default_screen);
      }
    }

    attributeChangedCallback(name, oldValue, newValue) {
      var i, len, ref, results, screen;
      boundMethodCheck(this, MultiScreenElement);
      ref = this.querySelectorAll('.screen');
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        screen = ref[i];
        if (screen.getAttribute('name') === newValue) {
          results.push(screen.removeAttribute('hidden'));
        } else {
          results.push(screen.setAttribute('hidden', ''));
        }
      }
      return results;
    }

    set_screen(name) {
      boundMethodCheck(this, MultiScreenElement);
      return this.setAttribute('screen', name);
    }

    get_screen(name) {
      boundMethodCheck(this, MultiScreenElement);
      return this.querySelector(`.screen[name='${name}']`);
    }

  };

  Object.defineProperty(MultiScreenElement, 'observedAttributes', {
    get: function() {
      return ['screen'];
    }
  });

  return MultiScreenElement;

}).call(this);
