// Generated by CoffeeScript 2.3.2
var StampButtonElement, StampElement, StampSwitchElement,
  boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } },
  indexOf = [].indexOf;

import {
  MultiScreenElement
} from './screen.mjs';

import {
  stamp_svg
} from './stamp_elements.mjs';

StampElement = (function() {
  class StampElement extends MultiScreenElement {
    constructor(default_screen) {
      super(default_screen);
      this.connectedCallback = this.connectedCallback.bind(this);
      this.attributeChangedCallback = this.attributeChangedCallback.bind(this);
      this.set_stamp_type = this.set_stamp_type.bind(this);
    }

    connectedCallback() {
      boundMethodCheck(this, StampElement);
      super.connectedCallback();
      return this.classList.add('stamp');
    }

    attributeChangedCallback(name, old_value, new_value) {
      boundMethodCheck(this, StampElement);
      super.attributeChangedCallback(name, old_value, new_value);
      if (name === 'type' && (this.set_stamp_type != null)) {
        this.set_stamp_type(new_value);
      }
      if (name === 'class' && (this.set_stamp_type != null)) {
        // if class "small" is removed or added
        if ((old_value == null) || (new_value == null) || (indexOf.call(old_value.split(' '), 'small') >= 0) !== (indexOf.call(new_value.split(' '), 'small') >= 0)) {
          return this.set_stamp_type(this.getAttribute('type'));
        }
      }
    }

    set_stamp_type(type) {
      var size;
      boundMethodCheck(this, StampElement);
      this.innerHTML = '';
      size = this.classList.contains('small') ? 'small' : 'big';
      if (type === 'ghost') {
        return this.appendChild(stamp_svg.small.ghost.cloneNode(true));
      }
    }

  };

  Object.defineProperty(StampElement, 'observedAttributes', {
    get: () => {
      return MultiScreenElement.observedAttributes.concat(['type', 'class']);
    }
  });

  return StampElement;

}).call(this);

customElements.define('stamp-icon', StampElement);

StampButtonElement = class StampButtonElement extends StampElement {
  constructor() {
    super(...arguments);
    this.connectedCallback = this.connectedCallback.bind(this);
  }

  connectedCallback() {
    boundMethodCheck(this, StampButtonElement);
    super.connectedCallback();
    return this.addEventListener('click', (event) => {
      if (!this.hasAttribute('disabled')) {
        return this.onclick(event);
      }
    });
  }

};

customElements.define('stamp-button', StampButtonElement);

StampSwitchElement = (function() {
  class StampSwitchElement extends StampButtonElement {
    constructor() {
      super(...arguments);
      this.connectedCallback = this.connectedCallback.bind(this);
      this.onclick = this.onclick.bind(this);
      this.attributeChangedCallback = this.attributeChangedCallback.bind(this);
      this.set_stamp_type = this.set_stamp_type.bind(this);
    }

    connectedCallback() {
      boundMethodCheck(this, StampSwitchElement);
      super.connectedCallback();
      if (!this.hasAttribute('state')) {
        return this.setAttribute('state', 'off');
      }
    }

    onclick(event) {
      boundMethodCheck(this, StampSwitchElement);
      if (!this.hasAttribute('state') || this.getAttribute('state') === 'off') {
        this.setAttribute('state', 'on');
      } else {
        this.setAttribute('state', 'off');
      }
      return event.stopPropagation();
    }

    attributeChangedCallback(name, old_value, new_value) {
      boundMethodCheck(this, StampSwitchElement);
      super.attributeChangedCallback(name, old_value, new_value);
      if (name === 'state' && (this.onstatechange != null)) {
        return this.onstatechange(new_value);
      }
    }

    set_stamp_type(type) {
      var size;
      boundMethodCheck(this, StampSwitchElement);
      this.innerHTML = '';
      size = this.classList.contains('small') ? 'small' : 'big';
      if (type === 'triangle') {
        return this.appendChild(stamp_svg[size].triangle_right.cloneNode(true));
      } else if (type === 'chevron') {
        return this.appendChild(stamp_svg[size].chevron_up.cloneNode(true));
      }
    }

  };

  Object.defineProperty(StampSwitchElement, 'observedAttributes', {
    get: () => {
      return StampButtonElement.observedAttributes.concat(['state']);
    }
  });

  return StampSwitchElement;

}).call(this);

customElements.define('stamp-switch', StampSwitchElement);
