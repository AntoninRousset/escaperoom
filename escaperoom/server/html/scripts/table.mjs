// Generated by CoffeeScript 2.3.2
var boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

import {
  SyncedContainer
} from './container.mjs';

export var SyncedTable = class SyncedTable extends SyncedContainer {
  constructor() {
    super();
    this.connectedCallback = this.connectedCallback.bind(this);
    this.onadditem = this.onadditem.bind(this);
    this.onupdateitem = this.onupdateitem.bind(this);
    this.onremoveitem = this.onremoveitem.bind(this);
    this.classList.add('table');
    Object.defineProperty(this, 'tbody', {
      get: () => {
        return this.querySelector('*.tbody');
      }
    });
  }

  connectedCallback() {
    boundMethodCheck(this, SyncedTable);
    this.src = this.getAttribute('src');
    return super.connectedCallback();
  }

  onadditem(id, data) {
    var item, template, use_shadow;
    boundMethodCheck(this, SyncedTable);
    template = this.tbody.querySelector('template');
    item = this.instantiate_template(template, this.tbody);
    item.setAttribute('item_id', id);
    return this.ugpdate_item(item, data, use_shadow = false);
  }

  onupdateitem(id, data) {
    var item, use_shadow;
    boundMethodCheck(this, SyncedTable);
    item = this.tbody.querySelector(`*[item_id='${id}']`);
    return this.update_item(item, data, use_shadow = false);
  }

  onremoveitem(id, data) {
    var item;
    boundMethodCheck(this, SyncedTable);
    item = this.tbody.querySelector(`*[item_id='${id}']`);
    return item.remove();
  }

};

customElements.define('synced-table', SyncedTable);
