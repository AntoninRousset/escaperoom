// Generated by CoffeeScript 2.3.2
var TabContent, TabNav,
  boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

import {
  FetchedElement,
  fetch_data
} from './fetch.mjs';

TabNav = class TabNav extends FetchedElement {
  constructor() {
    super();
    this.connectedCallback = this.connectedCallback.bind(this);
    this.onnewdata = this.onnewdata.bind(this);
    this.select_from_hash = this.select_from_hash.bind(this);
    this.select = this.select.bind(this);
    this.src = 'interface/tabs';
    // set default class
    this.classList.add('loadable');
  }

  connectedCallback() {
    var content;
    boundMethodCheck(this, TabNav);
    super.connectedCallback();
    //# create content screen
    content = document.createElement('div');
    content.classList.add('content');
    this.appendChild(content);
    return this.load_from_src();
  }

  async onnewdata(data) {
    var a, group, group_div, group_h1, i, j, len, len1, main_screen, p, ref, svg, tab;
    boundMethodCheck(this, TabNav);
    main_screen = this.get_screen('main');
    main_screen.innerHTML = '';
    for (i = 0, len = data.length; i < len; i++) {
      group = data[i];
      group_div = document.createElement('div');
      group_h1 = document.createElement('h1');
      group_h1.innerText = group.name;
      group_div.appendChild(group_h1);
      ref = group.tabs;
      // TODO all svg could be fetched in parallel
      // TODO add svg data_type in fetch_data
      for (j = 0, len1 = ref.length; j < len1; j++) {
        tab = ref[j];
        a = document.createElement('a');
        a.href = '#' + tab.id;
        // add svg icon
        svg = (await fetch_data(`/interface/tabs/${tab.id}/icon`, 'html'));
        svg = svg.querySelector('svg');
        a.appendChild(svg);
        // add title
        p = document.createElement('p');
        p.textContent = tab.name;
        a.appendChild(p);
        group_div.appendChild(a);
      }
      main_screen.appendChild(group_div);
    }
    window.addEventListener('hashchange', this.select_from_hash);
    return this.select_from_hash();
  }

  select_from_hash() {
    boundMethodCheck(this, TabNav);
    return this.select(location.hash.substr(1));
  }

  select(tab_id) {
    var a, i, len, ref;
    boundMethodCheck(this, TabNav);
    ref = this.querySelectorAll('a');
    // remove all selected
    for (i = 0, len = ref.length; i < len; i++) {
      a = ref[i];
      a.removeAttribute('selected');
    }
    a = this.querySelector('a[href="#' + tab_id + '"]');
    if (!a) {
      tab_id = this.querySelector('a').getAttribute('href').substr(1);
      return location.hash = tab_id;
    } else {
      return a.setAttribute('selected', '');
    }
  }

};

TabContent = class TabContent extends FetchedElement {
  constructor() {
    var data_type;
    super(data_type = 'text');
    this.select_from_hash = this.select_from_hash.bind(this);
    this.select = this.select.bind(this);
    this.onnewdata = this.onnewdata.bind(this);
    window.addEventListener('hashchange', this.select_from_hash);
    window.addEventListener('load', this.select_from_hash);
    this.get_screen('main').attachShadow({
      mode: 'open'
    });
  }

  select_from_hash() {
    boundMethodCheck(this, TabContent);
    return this.select(location.hash.substr(1));
  }

  select(tab_id) {
    boundMethodCheck(this, TabContent);
    if (!tab_id) {
      return;
    }
    this.tab_id = tab_id;
    return this.src = `interface/tabs/${tab_id}/content`;
  }

  async onnewdata(html) {
    var m, module_url;
    boundMethodCheck(this, TabContent);
    this.get_screen('main').shadowRoot.innerHTML = html;
    // load script after html to have access to dom
    // coffeescript dynamic import doesn't seem mature, using pure JS instead
    module_url = `/interface/tabs/${this.tab_id}/script`;
    m = (await import(module_url));
    if (m.onload != null) {
      return m.onload(this.get_screen('main').shadowRoot);
    }
  }

};

customElements.define('tab-nav', TabNav);

customElements.define('tab-content', TabContent);
