// Generated by CoffeeScript 2.3.2
var boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

import {
  FetchedElement
} from './fetch.mjs';

export var SyncedElement = (function() {
  var event_source, subscriptions;

  class SyncedElement extends FetchedElement {
    constructor() {
      super(...arguments);
      this.disconnectedCallback = this.disconnectedCallback.bind(this);
      this.onnewdata = this.onnewdata.bind(this);
      this.attributeChangedCallback = this.attributeChangedCallback.bind(this);
    }

    disconnectedCallback() {
      boundMethodCheck(this, SyncedElement);
      return this.unsubscribe();
    }

    subscribe(filter) {
      if (typeof filter === 'string') {
        return subscriptions[this] = (event) => {
          return event.src === filter;
        };
      } else if (typeof filter === 'function') {
        return subscriptions[this] = filter;
      } else {
        return log.error('Invalid filter', filter);
      }
    }

    unsubscribe() {
      return delete subscriptions[this];
    }

    onnewdata(data) {
      boundMethodCheck(this, SyncedElement);
      console.log('new data:', data);
      return this.fill_slots(this, data);
    }

    attributeChangedCallback(name, old_value, new_value) {
      boundMethodCheck(this, SyncedElement);
      super.attributeChangedCallback(name, old_value, new_value);
      if (name === 'src') {
        return this.subscribe(this.src);
      }
    }

  };

  subscriptions = [];

  event_source = new EventSource('events');

  event_source.onmessage = function(event) {
    var data, event_src, filter, results, subscriber;
    data = JSON.parse(event.data);
    if (data['type'] === 'update') {
      event_src = data['src'];
    }
    results = [];
    for (subscriber in subscriptions) {
      filter = subscriptions[subscriber];
      if (filter(data)) {
        results.push(subscriber.load_from_src());
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  return SyncedElement;

}).call(this);

customElements.define('synced-element', SyncedElement);
