// Generated by CoffeeScript 2.3.2
var toggle_row_expand,
  indexOf = [].indexOf,
  boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

import {
  SyncedContainer
} from './container.mjs';

import {
  is_empty
} from './utils.mjs';

toggle_row_expand = function() {
  var row;
  row = this.closest('.lrow');
  if (indexOf.call(row.classList, 'opened') >= 0) {
    return row.classList.remove('opened');
  } else {
    return row.classList.add('opened');
  }
};

export var SyncedList = class SyncedList extends SyncedContainer {
  constructor() {
    super();
    this.connectedCallback = this.connectedCallback.bind(this);
    this.get_body = this.get_body.bind(this);
    this.onnewdata = this.onnewdata.bind(this);
    this.create_item = this.create_item.bind(this);
    this.classList.add('list');
  }

  connectedCallback() {
    boundMethodCheck(this, SyncedList);
    this.src = this.getAttribute('src');
    return super.connectedCallback();
  }

  get_body() {
    boundMethodCheck(this, SyncedList);
    return this.querySelector('*.lbody');
  }

  onnewdata(data) {
    var item, item_data, item_id, newbody;
    boundMethodCheck(this, SyncedList);
    if (this.sortData != null) {
      data = this.sortData(data);
    }
    newbody = document.createElement('div');
    newbody.classList.add('lbody');
    for (item_id in data) {
      item_data = data[item_id];
      item = this.create_item(item_id, item_data);
      newbody.appendChild(item);
    }
    return this.body = newbody;
  }

  create_item(item_id, item_data) {
    var expand, i, item, len, ref, template;
    boundMethodCheck(this, SyncedList);
    template = this.body.querySelector('template');
    item = this.instantiate_template(template, this.body);
    item.setAttribute('item_id', item_id);
    this.fill_slots(item, item_data);
    if (indexOf.call(item.classList, 'expandable') >= 0) {
      ref = item.querySelectorAll('.expand');
      for (i = 0, len = ref.length; i < len; i++) {
        expand = ref[i];
        expand.addEventListener('click', toggle_row_expand);
      }
    }
    return item;
  }

};

customElements.define('synced-list', SyncedList);
